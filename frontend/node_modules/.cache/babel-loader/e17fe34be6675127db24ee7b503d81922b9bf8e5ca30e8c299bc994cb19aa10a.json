{"ast":null,"code":"var _jsxFileName = \"/Users/brysonlindsey/Documents/my-project/frontend/src/components/LocalDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { Container, Box, Typography, Grid, Paper, Card, CardContent, Divider, Chip, List, ListItem, ListItemText, ListItemIcon, CircularProgress, Button, IconButton, Tooltip, Tab, Tabs, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Slider, FormControl, InputLabel, Select, MenuItem, OutlinedInput, Checkbox, ListItemButton, TablePagination } from \"@mui/material\";\nimport HomeButton from \"./HomeButton\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip as RechartsTooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line } from \"recharts\";\nimport useDebounce from \"../hooks/useDebounce\";\nimport { format } from \"date-fns\";\nimport { Responsive, WidthProvider } from \"react-grid-layout\";\nimport \"react-grid-layout/css/styles.css\";\nimport \"react-resizable/css/styles.css\";\n\n// Enable responsive grid layout\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResponsiveGridLayout = WidthProvider(Responsive);\n\n// Simulated data for dashboard\n_c = ResponsiveGridLayout;\nconst facilityData = [{\n  name: \"Tampa General Hospital\",\n  state: \"FL\",\n  hazardLevel: \"High\",\n  readinessScore: 85,\n  bedCapacity: 1011,\n  emergencyStaff: 287\n}, {\n  name: \"Memorial Hermann Hospital\",\n  state: \"TX\",\n  hazardLevel: \"Very High\",\n  readinessScore: 92,\n  bedCapacity: 657,\n  emergencyStaff: 198\n}, {\n  name: \"Orlando Regional Medical Center\",\n  state: \"FL\",\n  hazardLevel: \"High\",\n  readinessScore: 79,\n  bedCapacity: 808,\n  emergencyStaff: 235\n}, {\n  name: \"Methodist Hospital\",\n  state: \"TX\",\n  hazardLevel: \"Very High\",\n  readinessScore: 81,\n  bedCapacity: 573,\n  emergencyStaff: 178\n}, {\n  name: \"North Florida Regional Medical Center\",\n  state: \"FL\",\n  hazardLevel: \"Extreme\",\n  readinessScore: 88,\n  bedCapacity: 432,\n  emergencyStaff: 156\n}, {\n  name: \"West Florida Hospital\",\n  state: \"FL\",\n  hazardLevel: \"High\",\n  readinessScore: 77,\n  bedCapacity: 531,\n  emergencyStaff: 167\n}, {\n  name: \"Bayshore Medical Center\",\n  state: \"TX\",\n  hazardLevel: \"High\",\n  readinessScore: 75,\n  bedCapacity: 364,\n  emergencyStaff: 122\n}, {\n  name: \"Doctors Hospital of Sarasota\",\n  state: \"FL\",\n  hazardLevel: \"Moderate\",\n  readinessScore: 82,\n  bedCapacity: 155,\n  emergencyStaff: 87\n}, {\n  name: \"Corpus Christi Medical Center\",\n  state: \"TX\",\n  hazardLevel: \"Very High\",\n  readinessScore: 84,\n  bedCapacity: 413,\n  emergencyStaff: 135\n}, {\n  name: \"Kendall Regional Medical Center\",\n  state: \"FL\",\n  hazardLevel: \"High\",\n  readinessScore: 80,\n  bedCapacity: 417,\n  emergencyStaff: 143\n}];\nconst hazardDistribution = [{\n  name: \"Extreme\",\n  value: 1\n}, {\n  name: \"Very High\",\n  value: 3\n}, {\n  name: \"High\",\n  value: 5\n}, {\n  name: \"Moderate\",\n  value: 1\n}, {\n  name: \"Low\",\n  value: 0\n}];\nconst stateDistribution = [{\n  name: \"Florida\",\n  value: 6\n}, {\n  name: \"Texas\",\n  value: 4\n}, {\n  name: \"Georgia\",\n  value: 0\n}, {\n  name: \"Louisiana\",\n  value: 0\n}, {\n  name: \"Other\",\n  value: 0\n}];\nconst monthlyIncidents = [{\n  month: \"Jan\",\n  incidents: 12\n}, {\n  month: \"Feb\",\n  incidents: 9\n}, {\n  month: \"Mar\",\n  incidents: 15\n}, {\n  month: \"Apr\",\n  incidents: 23\n}, {\n  month: \"May\",\n  incidents: 28\n}, {\n  month: \"Jun\",\n  incidents: 37\n}, {\n  month: \"Jul\",\n  incidents: 42\n}, {\n  month: \"Aug\",\n  incidents: 58\n}, {\n  month: \"Sep\",\n  incidents: 61\n}, {\n  month: \"Oct\",\n  incidents: 47\n}, {\n  month: \"Nov\",\n  incidents: 31\n}, {\n  month: \"Dec\",\n  incidents: 19\n}];\nconst resourceDistribution = [{\n  name: \"Beds Available\",\n  value: 4361\n}, {\n  name: \"Beds Occupied\",\n  value: 1500\n}];\n\n// Color constants matching the app's theme\nconst COLORS = [\"#FF6600\", \"#FF8533\", \"#FFA366\", \"#FFBF99\", \"#FFD9CC\"];\nconst BLUE_COLORS = [\"#003366\", \"#004080\", \"#004d99\", \"#0059b3\", \"#0066cc\"];\n\n// Define US regions\nconst REGIONS = {\n  Northeast: [\"CT\", \"DE\", \"ME\", \"MD\", \"MA\", \"NH\", \"NJ\", \"NY\", \"PA\", \"RI\", \"VT\"],\n  Southeast: [\"AL\", \"AR\", \"FL\", \"GA\", \"KY\", \"LA\", \"MS\", \"NC\", \"SC\", \"TN\", \"VA\", \"WV\"],\n  Midwest: [\"IL\", \"IN\", \"IA\", \"KS\", \"MI\", \"MN\", \"MO\", \"NE\", \"ND\", \"OH\", \"SD\", \"WI\"],\n  Southwest: [\"AZ\", \"NM\", \"OK\", \"TX\"],\n  West: [\"AK\", \"CA\", \"CO\", \"HI\", \"ID\", \"MT\", \"NV\", \"OR\", \"UT\", \"WA\", \"WY\"]\n};\nfunction LocalDashboard() {\n  _s();\n  var _location$state;\n  const location = useLocation();\n  const defaultZipCode = \"33612\"; // Default to a Florida zip code, but we're not using it for filtering now\n  const zipCode = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.zipCode) || defaultZipCode;\n  const [tabValue, setTabValue] = useState(0);\n  const [localData, setLocalData] = useState([]);\n  const [nearbyData, setNearbyData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Filtering state variables\n  const [selectedStates, setSelectedStates] = useState([]);\n  const [selectedRegion, setSelectedRegion] = useState(\"All\");\n  const [readinessRange, setReadinessRange] = useState([70, 95]); // Min and max readiness score\n  const [selectedHazardLevels, setSelectedHazardLevels] = useState([\"Extreme\", \"Very High\", \"High\", \"Moderate\", \"Low\"]); // All hazard levels selected by default\n\n  // All states for filtering\n  const allStates = {\n    AL: \"Alabama\",\n    AK: \"Alaska\",\n    AZ: \"Arizona\",\n    AR: \"Arkansas\",\n    CA: \"California\",\n    CO: \"Colorado\",\n    CT: \"Connecticut\",\n    DE: \"Delaware\",\n    FL: \"Florida\",\n    GA: \"Georgia\",\n    HI: \"Hawaii\",\n    ID: \"Idaho\",\n    IL: \"Illinois\",\n    IN: \"Indiana\",\n    IA: \"Iowa\",\n    KS: \"Kansas\",\n    KY: \"Kentucky\",\n    LA: \"Louisiana\",\n    ME: \"Maine\",\n    MD: \"Maryland\",\n    MA: \"Massachusetts\",\n    MI: \"Michigan\",\n    MN: \"Minnesota\",\n    MS: \"Mississippi\",\n    MO: \"Missouri\",\n    MT: \"Montana\",\n    NE: \"Nebraska\",\n    NV: \"Nevada\",\n    NH: \"New Hampshire\",\n    NJ: \"New Jersey\",\n    NM: \"New Mexico\",\n    NY: \"New York\",\n    NC: \"North Carolina\",\n    ND: \"North Dakota\",\n    OH: \"Ohio\",\n    OK: \"Oklahoma\",\n    OR: \"Oregon\",\n    PA: \"Pennsylvania\",\n    RI: \"Rhode Island\",\n    SC: \"South Carolina\",\n    SD: \"South Dakota\",\n    TN: \"Tennessee\",\n    TX: \"Texas\",\n    UT: \"Utah\",\n    VT: \"Vermont\",\n    VA: \"Virginia\",\n    WA: \"Washington\",\n    WV: \"West Virginia\",\n    WI: \"Wisconsin\",\n    WY: \"Wyoming\"\n  };\n\n  // Derived state for dashboard data\n  const [allFacilityData, setAllFacilityData] = useState([]); // All facilities before filtering\n  const [facilityData, setFacilityData] = useState([]); // Filtered facilities\n  const [stateDistribution, setStateDistribution] = useState([]);\n  const [totalBeds, setTotalBeds] = useState(0);\n  const [totalStaff, setTotalStaff] = useState(0);\n\n  // Monthly incidents data - guaranteed to have data\n  const monthlyIncidents = [{\n    month: \"Jan\",\n    incidents: 12\n  }, {\n    month: \"Feb\",\n    incidents: 9\n  }, {\n    month: \"Mar\",\n    incidents: 15\n  }, {\n    month: \"Apr\",\n    incidents: 23\n  }, {\n    month: \"May\",\n    incidents: 28\n  }, {\n    month: \"Jun\",\n    incidents: 37\n  }, {\n    month: \"Jul\",\n    incidents: 42\n  }, {\n    month: \"Aug\",\n    incidents: 58\n  }, {\n    month: \"Sep\",\n    incidents: 61\n  }, {\n    month: \"Oct\",\n    incidents: 47\n  }, {\n    month: \"Nov\",\n    incidents: 31\n  }, {\n    month: \"Dec\",\n    incidents: 19\n  }];\n\n  // Hazard distribution - always have dummy data available\n  const [hazardDistribution, setHazardDistribution] = useState([{\n    name: \"Extreme\",\n    value: 15\n  }, {\n    name: \"Very High\",\n    value: 32\n  }, {\n    name: \"High\",\n    value: 48\n  }, {\n    name: \"Moderate\",\n    value: 25\n  }, {\n    name: \"Low\",\n    value: 10\n  }]);\n\n  // Resource distribution - always have dummy data available\n  const [resourceDistribution, setResourceDistribution] = useState([{\n    name: \"Beds Available\",\n    value: 4361\n  }, {\n    name: \"Beds Occupied\",\n    value: 1500\n  }]);\n\n  // Default state distribution for fallback\n  const defaultStateDistribution = [{\n    name: \"Florida\",\n    value: 35\n  }, {\n    name: \"Texas\",\n    value: 28\n  }, {\n    name: \"California\",\n    value: 22\n  }, {\n    name: \"Georgia\",\n    value: 14\n  }, {\n    name: \"Tennessee\",\n    value: 11\n  }, {\n    name: \"Other States\",\n    value: 20\n  }];\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const [isOffline, setIsOffline] = useState(false);\n\n  // Layout for responsive grid\n  const [layouts, setLayouts] = useState({\n    lg: [{\n      i: \"stats\",\n      x: 0,\n      y: 0,\n      w: 12,\n      h: 1,\n      static: false\n    }, {\n      i: \"incidents\",\n      x: 0,\n      y: 1,\n      w: 8,\n      h: 2,\n      static: false\n    }, {\n      i: \"hazards\",\n      x: 8,\n      y: 1,\n      w: 4,\n      h: 2,\n      static: false\n    }, {\n      i: \"alerts\",\n      x: 0,\n      y: 3,\n      w: 12,\n      h: 1,\n      static: false\n    }],\n    md: [{\n      i: \"stats\",\n      x: 0,\n      y: 0,\n      w: 12,\n      h: 1\n    }, {\n      i: \"incidents\",\n      x: 0,\n      y: 1,\n      w: 8,\n      h: 2\n    }, {\n      i: \"hazards\",\n      x: 8,\n      y: 1,\n      w: 4,\n      h: 2\n    }, {\n      i: \"alerts\",\n      x: 0,\n      y: 3,\n      w: 12,\n      h: 1\n    }],\n    sm: [{\n      i: \"stats\",\n      x: 0,\n      y: 0,\n      w: 6,\n      h: 2\n    }, {\n      i: \"incidents\",\n      x: 0,\n      y: 2,\n      w: 6,\n      h: 2\n    }, {\n      i: \"hazards\",\n      x: 0,\n      y: 4,\n      w: 6,\n      h: 2\n    }, {\n      i: \"alerts\",\n      x: 0,\n      y: 6,\n      w: 6,\n      h: 1\n    }],\n    xs: [{\n      i: \"stats\",\n      x: 0,\n      y: 0,\n      w: 4,\n      h: 2\n    }, {\n      i: \"incidents\",\n      x: 0,\n      y: 2,\n      w: 4,\n      h: 2\n    }, {\n      i: \"hazards\",\n      x: 0,\n      y: 4,\n      w: 4,\n      h: 2\n    }, {\n      i: \"alerts\",\n      x: 0,\n      y: 6,\n      w: 4,\n      h: 1\n    }]\n  });\n\n  // Save layout changes to localStorage\n  const handleLayoutChange = (layout, layouts) => {\n    setLayouts(layouts);\n    localStorage.setItem(\"dashboardLayouts\", JSON.stringify(layouts));\n  };\n\n  // Load saved layouts on component mount\n  useEffect(() => {\n    const savedLayouts = localStorage.getItem(\"dashboardLayouts\");\n    if (savedLayouts) {\n      setLayouts(JSON.parse(savedLayouts));\n    }\n  }, []);\n  const handleTabChange = (event, newValue) => {\n    setTabValue(newValue);\n  };\n  const handleRegionChange = event => {\n    const region = event.target.value;\n    setSelectedRegion(region);\n    setPage(0);\n    if (region === \"All\") {\n      setSelectedStates([]);\n    } else {\n      setSelectedStates(REGIONS[region]);\n    }\n  };\n  const handleStateChange = event => {\n    const selectedStateValues = event.target.value;\n    setSelectedStates(selectedStateValues);\n    setPage(0);\n\n    // Determine if the selected states match a region\n    let matchedRegion = \"All\";\n    Object.entries(REGIONS).forEach(([region, states]) => {\n      // Check if selected states match exactly this region\n      if (states.length === selectedStateValues.length && states.every(state => selectedStateValues.includes(state))) {\n        matchedRegion = region;\n      }\n    });\n    setSelectedRegion(matchedRegion);\n  };\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  // Effect for auto-refreshing data every 30 minutes\n  useEffect(() => {\n    // Initial data fetch\n    fetchData();\n\n    // Set up 30-minute interval for data refresh\n    const refreshInterval = setInterval(() => {\n      fetchData();\n    }, 30 * 60 * 1000); // 30 minutes in milliseconds\n\n    // Clean up on unmount\n    return () => clearInterval(refreshInterval);\n  }, [selectedStates, selectedRegion]);\n\n  // Function to fetch data with online status handling\n  const fetchData = () => {\n    setLoading(true);\n\n    // Check if we're online\n    if (navigator.onLine) {\n      setIsOffline(false);\n\n      // Build the API URL\n      let url = \"http://localhost:8000/api/data/?nationwide=true\";\n      if (selectedStates.length > 0) {\n        selectedStates.forEach(state => {\n          url += `&states=${state}`;\n        });\n      }\n      fetch(url).then(res => res.json()).then(data => {\n        console.log(\"API response:\", data);\n        setLocalData(data.local);\n        setNearbyData(data.nearby);\n\n        // Process the data\n        processData([...data.local, ...data.nearby]);\n\n        // Update last updated timestamp\n        setLastUpdated(new Date());\n\n        // Store data in localStorage for offline use\n        localStorage.setItem(\"dashboardData\", JSON.stringify({\n          local: data.local,\n          nearby: data.nearby,\n          timestamp: new Date().toISOString()\n        }));\n        setLoading(false);\n      }).catch(err => {\n        console.error(\"Error fetching data:\", err);\n        setIsOffline(true);\n        loadCachedData();\n      });\n    } else {\n      // We're offline, use cached data\n      setIsOffline(true);\n      loadCachedData();\n    }\n  };\n\n  // Function to load cached data from localStorage\n  const loadCachedData = () => {\n    const cachedData = localStorage.getItem(\"dashboardData\");\n    if (cachedData) {\n      const parsed = JSON.parse(cachedData);\n      setLocalData(parsed.local);\n      setNearbyData(parsed.nearby);\n      processData([...parsed.local, ...parsed.nearby]);\n      setLastUpdated(new Date(parsed.timestamp));\n    }\n    setLoading(false);\n  };\n\n  // Apply filters whenever any filter changes\n  useEffect(() => {\n    applyFilters();\n  }, [selectedStates, readinessRange, selectedHazardLevels, allFacilityData]);\n\n  // Apply state/region filters to facility data\n  const applyFilters = () => {\n    if (allFacilityData.length === 0) return;\n\n    // Create a clean copy of all facility data to avoid duplicate tracking issues\n    let filtered = [...allFacilityData];\n\n    // Track facilities by a unique identifier to prevent duplicates\n    const uniqueFacilities = new Map();\n\n    // Apply state filter if any states are selected\n    if (selectedStates.length > 0) {\n      filtered = filtered.filter(facility => selectedStates.includes(facility.state));\n    }\n\n    // Apply readiness score range filter\n    filtered = filtered.filter(facility => facility.readinessScore >= readinessRange[0] && facility.readinessScore <= readinessRange[1]);\n\n    // Apply hazard level filter\n    if (selectedHazardLevels.length > 0 && selectedHazardLevels.length < 5) {\n      filtered = filtered.filter(facility => selectedHazardLevels.includes(facility.hazardLevel));\n    }\n\n    // Ensure no duplicates by using a Map with facility name + state as key\n    filtered.forEach(facility => {\n      const key = `${facility.name}-${facility.state}-${facility.city}`;\n      uniqueFacilities.set(key, facility);\n    });\n\n    // Convert back to array\n    const uniqueFiltered = Array.from(uniqueFacilities.values());\n\n    // Update the displayed facility data\n    setFacilityData(uniqueFiltered);\n\n    // Recalculate totals based on filtered data\n    const beds = Math.max(uniqueFiltered.reduce((sum, facility) => sum + (facility.bedCapacity || 0), 0), 100 // Minimum reasonable value\n    );\n    setTotalBeds(beds);\n  };\n\n  // Group data by location to get facility-level data\n  const processFacilityData = data => {\n    // Use a Map to ensure unique facilities\n    const locationMap = new Map();\n\n    // Make sure we have data to process\n    if (!data || data.length === 0) {\n      console.log(\"No data to process in processFacilityData\");\n      return [];\n    }\n    console.log(`Processing ${data.length} person records to extract facilities`);\n\n    // Group by location\n    data.forEach(person => {\n      // Skip entries without a location\n      if (!person.location) {\n        return;\n      }\n\n      // Create a unique key for the facility\n      // Combine location name, city, and state to ensure uniqueness\n      const facilityKey = `${person.location}_${person.city || \"\"}_${person.state || \"\"}`;\n      if (!locationMap.has(facilityKey)) {\n        locationMap.set(facilityKey, {\n          name: person.location,\n          state: person.state,\n          city: person.city,\n          zip_code: person.zip_code,\n          latitude: person.latitude,\n          longitude: person.longitude,\n          staff: []\n        });\n      }\n      locationMap.get(facilityKey).staff.push(person);\n    });\n    console.log(`Grouped ${data.length} person records into ${locationMap.size} unique facilities`);\n\n    // ... existing code ...\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 623,\n    columnNumber: 5\n  }, this);\n}\n_s(LocalDashboard, \"6Z8zpOKapIwar1N8Uhp3Bp6rILg=\", false, function () {\n  return [useLocation];\n});\n_c2 = LocalDashboard;\nexport default LocalDashboard;\nvar _c, _c2;\n$RefreshReg$(_c, \"ResponsiveGridLayout\");\n$RefreshReg$(_c2, \"LocalDashboard\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","Container","Box","Typography","Grid","Paper","Card","CardContent","Divider","Chip","List","ListItem","ListItemText","ListItemIcon","CircularProgress","Button","IconButton","Tooltip","Tab","Tabs","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Slider","FormControl","InputLabel","Select","MenuItem","OutlinedInput","Checkbox","ListItemButton","TablePagination","HomeButton","BarChart","Bar","XAxis","YAxis","CartesianGrid","RechartsTooltip","Legend","ResponsiveContainer","PieChart","Pie","Cell","LineChart","Line","useDebounce","format","Responsive","WidthProvider","jsxDEV","_jsxDEV","ResponsiveGridLayout","_c","facilityData","name","state","hazardLevel","readinessScore","bedCapacity","emergencyStaff","hazardDistribution","value","stateDistribution","monthlyIncidents","month","incidents","resourceDistribution","COLORS","BLUE_COLORS","REGIONS","Northeast","Southeast","Midwest","Southwest","West","LocalDashboard","_s","_location$state","location","defaultZipCode","zipCode","tabValue","setTabValue","localData","setLocalData","nearbyData","setNearbyData","loading","setLoading","selectedStates","setSelectedStates","selectedRegion","setSelectedRegion","readinessRange","setReadinessRange","selectedHazardLevels","setSelectedHazardLevels","allStates","AL","AK","AZ","AR","CA","CO","CT","DE","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY","allFacilityData","setAllFacilityData","setFacilityData","setStateDistribution","totalBeds","setTotalBeds","totalStaff","setTotalStaff","setHazardDistribution","setResourceDistribution","defaultStateDistribution","page","setPage","rowsPerPage","setRowsPerPage","lastUpdated","setLastUpdated","Date","isOffline","setIsOffline","layouts","setLayouts","lg","i","x","y","w","h","static","md","sm","xs","handleLayoutChange","layout","localStorage","setItem","JSON","stringify","savedLayouts","getItem","parse","handleTabChange","event","newValue","handleRegionChange","region","target","handleStateChange","selectedStateValues","matchedRegion","Object","entries","forEach","states","length","every","includes","handleChangePage","newPage","handleChangeRowsPerPage","parseInt","fetchData","refreshInterval","setInterval","clearInterval","navigator","onLine","url","fetch","then","res","json","data","console","log","local","nearby","processData","timestamp","toISOString","catch","err","error","loadCachedData","cachedData","parsed","applyFilters","filtered","uniqueFacilities","Map","filter","facility","key","city","set","uniqueFiltered","Array","from","values","beds","Math","max","reduce","sum","processFacilityData","locationMap","person","facilityKey","has","zip_code","latitude","longitude","staff","get","push","size","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/brysonlindsey/Documents/my-project/frontend/src/components/LocalDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport {\n  Container,\n  Box,\n  Typography,\n  Grid,\n  Paper,\n  Card,\n  CardContent,\n  Divider,\n  Chip,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  CircularProgress,\n  Button,\n  IconButton,\n  Tooltip,\n  Tab,\n  Tabs,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Slider,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  OutlinedInput,\n  Checkbox,\n  ListItemButton,\n  TablePagination,\n} from \"@mui/material\";\nimport HomeButton from \"./HomeButton\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip as RechartsTooltip,\n  Legend,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n  LineChart,\n  Line,\n} from \"recharts\";\nimport useDebounce from \"../hooks/useDebounce\";\nimport { format } from \"date-fns\";\nimport { Responsive, WidthProvider } from \"react-grid-layout\";\nimport \"react-grid-layout/css/styles.css\";\nimport \"react-resizable/css/styles.css\";\n\n// Enable responsive grid layout\nconst ResponsiveGridLayout = WidthProvider(Responsive);\n\n// Simulated data for dashboard\nconst facilityData = [\n  {\n    name: \"Tampa General Hospital\",\n    state: \"FL\",\n    hazardLevel: \"High\",\n    readinessScore: 85,\n    bedCapacity: 1011,\n    emergencyStaff: 287,\n  },\n  {\n    name: \"Memorial Hermann Hospital\",\n    state: \"TX\",\n    hazardLevel: \"Very High\",\n    readinessScore: 92,\n    bedCapacity: 657,\n    emergencyStaff: 198,\n  },\n  {\n    name: \"Orlando Regional Medical Center\",\n    state: \"FL\",\n    hazardLevel: \"High\",\n    readinessScore: 79,\n    bedCapacity: 808,\n    emergencyStaff: 235,\n  },\n  {\n    name: \"Methodist Hospital\",\n    state: \"TX\",\n    hazardLevel: \"Very High\",\n    readinessScore: 81,\n    bedCapacity: 573,\n    emergencyStaff: 178,\n  },\n  {\n    name: \"North Florida Regional Medical Center\",\n    state: \"FL\",\n    hazardLevel: \"Extreme\",\n    readinessScore: 88,\n    bedCapacity: 432,\n    emergencyStaff: 156,\n  },\n  {\n    name: \"West Florida Hospital\",\n    state: \"FL\",\n    hazardLevel: \"High\",\n    readinessScore: 77,\n    bedCapacity: 531,\n    emergencyStaff: 167,\n  },\n  {\n    name: \"Bayshore Medical Center\",\n    state: \"TX\",\n    hazardLevel: \"High\",\n    readinessScore: 75,\n    bedCapacity: 364,\n    emergencyStaff: 122,\n  },\n  {\n    name: \"Doctors Hospital of Sarasota\",\n    state: \"FL\",\n    hazardLevel: \"Moderate\",\n    readinessScore: 82,\n    bedCapacity: 155,\n    emergencyStaff: 87,\n  },\n  {\n    name: \"Corpus Christi Medical Center\",\n    state: \"TX\",\n    hazardLevel: \"Very High\",\n    readinessScore: 84,\n    bedCapacity: 413,\n    emergencyStaff: 135,\n  },\n  {\n    name: \"Kendall Regional Medical Center\",\n    state: \"FL\",\n    hazardLevel: \"High\",\n    readinessScore: 80,\n    bedCapacity: 417,\n    emergencyStaff: 143,\n  },\n];\n\nconst hazardDistribution = [\n  { name: \"Extreme\", value: 1 },\n  { name: \"Very High\", value: 3 },\n  { name: \"High\", value: 5 },\n  { name: \"Moderate\", value: 1 },\n  { name: \"Low\", value: 0 },\n];\n\nconst stateDistribution = [\n  { name: \"Florida\", value: 6 },\n  { name: \"Texas\", value: 4 },\n  { name: \"Georgia\", value: 0 },\n  { name: \"Louisiana\", value: 0 },\n  { name: \"Other\", value: 0 },\n];\n\nconst monthlyIncidents = [\n  { month: \"Jan\", incidents: 12 },\n  { month: \"Feb\", incidents: 9 },\n  { month: \"Mar\", incidents: 15 },\n  { month: \"Apr\", incidents: 23 },\n  { month: \"May\", incidents: 28 },\n  { month: \"Jun\", incidents: 37 },\n  { month: \"Jul\", incidents: 42 },\n  { month: \"Aug\", incidents: 58 },\n  { month: \"Sep\", incidents: 61 },\n  { month: \"Oct\", incidents: 47 },\n  { month: \"Nov\", incidents: 31 },\n  { month: \"Dec\", incidents: 19 },\n];\n\nconst resourceDistribution = [\n  { name: \"Beds Available\", value: 4361 },\n  { name: \"Beds Occupied\", value: 1500 },\n];\n\n// Color constants matching the app's theme\nconst COLORS = [\"#FF6600\", \"#FF8533\", \"#FFA366\", \"#FFBF99\", \"#FFD9CC\"];\nconst BLUE_COLORS = [\"#003366\", \"#004080\", \"#004d99\", \"#0059b3\", \"#0066cc\"];\n\n// Define US regions\nconst REGIONS = {\n  Northeast: [\"CT\", \"DE\", \"ME\", \"MD\", \"MA\", \"NH\", \"NJ\", \"NY\", \"PA\", \"RI\", \"VT\"],\n  Southeast: [\n    \"AL\",\n    \"AR\",\n    \"FL\",\n    \"GA\",\n    \"KY\",\n    \"LA\",\n    \"MS\",\n    \"NC\",\n    \"SC\",\n    \"TN\",\n    \"VA\",\n    \"WV\",\n  ],\n  Midwest: [\n    \"IL\",\n    \"IN\",\n    \"IA\",\n    \"KS\",\n    \"MI\",\n    \"MN\",\n    \"MO\",\n    \"NE\",\n    \"ND\",\n    \"OH\",\n    \"SD\",\n    \"WI\",\n  ],\n  Southwest: [\"AZ\", \"NM\", \"OK\", \"TX\"],\n  West: [\"AK\", \"CA\", \"CO\", \"HI\", \"ID\", \"MT\", \"NV\", \"OR\", \"UT\", \"WA\", \"WY\"],\n};\n\nfunction LocalDashboard() {\n  const location = useLocation();\n  const defaultZipCode = \"33612\"; // Default to a Florida zip code, but we're not using it for filtering now\n  const zipCode = location.state?.zipCode || defaultZipCode;\n\n  const [tabValue, setTabValue] = useState(0);\n  const [localData, setLocalData] = useState([]);\n  const [nearbyData, setNearbyData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Filtering state variables\n  const [selectedStates, setSelectedStates] = useState([]);\n  const [selectedRegion, setSelectedRegion] = useState(\"All\");\n  const [readinessRange, setReadinessRange] = useState([70, 95]); // Min and max readiness score\n  const [selectedHazardLevels, setSelectedHazardLevels] = useState([\n    \"Extreme\",\n    \"Very High\",\n    \"High\",\n    \"Moderate\",\n    \"Low\",\n  ]); // All hazard levels selected by default\n\n  // All states for filtering\n  const allStates = {\n    AL: \"Alabama\",\n    AK: \"Alaska\",\n    AZ: \"Arizona\",\n    AR: \"Arkansas\",\n    CA: \"California\",\n    CO: \"Colorado\",\n    CT: \"Connecticut\",\n    DE: \"Delaware\",\n    FL: \"Florida\",\n    GA: \"Georgia\",\n    HI: \"Hawaii\",\n    ID: \"Idaho\",\n    IL: \"Illinois\",\n    IN: \"Indiana\",\n    IA: \"Iowa\",\n    KS: \"Kansas\",\n    KY: \"Kentucky\",\n    LA: \"Louisiana\",\n    ME: \"Maine\",\n    MD: \"Maryland\",\n    MA: \"Massachusetts\",\n    MI: \"Michigan\",\n    MN: \"Minnesota\",\n    MS: \"Mississippi\",\n    MO: \"Missouri\",\n    MT: \"Montana\",\n    NE: \"Nebraska\",\n    NV: \"Nevada\",\n    NH: \"New Hampshire\",\n    NJ: \"New Jersey\",\n    NM: \"New Mexico\",\n    NY: \"New York\",\n    NC: \"North Carolina\",\n    ND: \"North Dakota\",\n    OH: \"Ohio\",\n    OK: \"Oklahoma\",\n    OR: \"Oregon\",\n    PA: \"Pennsylvania\",\n    RI: \"Rhode Island\",\n    SC: \"South Carolina\",\n    SD: \"South Dakota\",\n    TN: \"Tennessee\",\n    TX: \"Texas\",\n    UT: \"Utah\",\n    VT: \"Vermont\",\n    VA: \"Virginia\",\n    WA: \"Washington\",\n    WV: \"West Virginia\",\n    WI: \"Wisconsin\",\n    WY: \"Wyoming\",\n  };\n\n  // Derived state for dashboard data\n  const [allFacilityData, setAllFacilityData] = useState([]); // All facilities before filtering\n  const [facilityData, setFacilityData] = useState([]); // Filtered facilities\n  const [stateDistribution, setStateDistribution] = useState([]);\n  const [totalBeds, setTotalBeds] = useState(0);\n  const [totalStaff, setTotalStaff] = useState(0);\n\n  // Monthly incidents data - guaranteed to have data\n  const monthlyIncidents = [\n    { month: \"Jan\", incidents: 12 },\n    { month: \"Feb\", incidents: 9 },\n    { month: \"Mar\", incidents: 15 },\n    { month: \"Apr\", incidents: 23 },\n    { month: \"May\", incidents: 28 },\n    { month: \"Jun\", incidents: 37 },\n    { month: \"Jul\", incidents: 42 },\n    { month: \"Aug\", incidents: 58 },\n    { month: \"Sep\", incidents: 61 },\n    { month: \"Oct\", incidents: 47 },\n    { month: \"Nov\", incidents: 31 },\n    { month: \"Dec\", incidents: 19 },\n  ];\n\n  // Hazard distribution - always have dummy data available\n  const [hazardDistribution, setHazardDistribution] = useState([\n    { name: \"Extreme\", value: 15 },\n    { name: \"Very High\", value: 32 },\n    { name: \"High\", value: 48 },\n    { name: \"Moderate\", value: 25 },\n    { name: \"Low\", value: 10 },\n  ]);\n\n  // Resource distribution - always have dummy data available\n  const [resourceDistribution, setResourceDistribution] = useState([\n    { name: \"Beds Available\", value: 4361 },\n    { name: \"Beds Occupied\", value: 1500 },\n  ]);\n\n  // Default state distribution for fallback\n  const defaultStateDistribution = [\n    { name: \"Florida\", value: 35 },\n    { name: \"Texas\", value: 28 },\n    { name: \"California\", value: 22 },\n    { name: \"Georgia\", value: 14 },\n    { name: \"Tennessee\", value: 11 },\n    { name: \"Other States\", value: 20 },\n  ];\n\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const [isOffline, setIsOffline] = useState(false);\n\n  // Layout for responsive grid\n  const [layouts, setLayouts] = useState({\n    lg: [\n      { i: \"stats\", x: 0, y: 0, w: 12, h: 1, static: false },\n      { i: \"incidents\", x: 0, y: 1, w: 8, h: 2, static: false },\n      { i: \"hazards\", x: 8, y: 1, w: 4, h: 2, static: false },\n      { i: \"alerts\", x: 0, y: 3, w: 12, h: 1, static: false },\n    ],\n    md: [\n      { i: \"stats\", x: 0, y: 0, w: 12, h: 1 },\n      { i: \"incidents\", x: 0, y: 1, w: 8, h: 2 },\n      { i: \"hazards\", x: 8, y: 1, w: 4, h: 2 },\n      { i: \"alerts\", x: 0, y: 3, w: 12, h: 1 },\n    ],\n    sm: [\n      { i: \"stats\", x: 0, y: 0, w: 6, h: 2 },\n      { i: \"incidents\", x: 0, y: 2, w: 6, h: 2 },\n      { i: \"hazards\", x: 0, y: 4, w: 6, h: 2 },\n      { i: \"alerts\", x: 0, y: 6, w: 6, h: 1 },\n    ],\n    xs: [\n      { i: \"stats\", x: 0, y: 0, w: 4, h: 2 },\n      { i: \"incidents\", x: 0, y: 2, w: 4, h: 2 },\n      { i: \"hazards\", x: 0, y: 4, w: 4, h: 2 },\n      { i: \"alerts\", x: 0, y: 6, w: 4, h: 1 },\n    ],\n  });\n\n  // Save layout changes to localStorage\n  const handleLayoutChange = (layout, layouts) => {\n    setLayouts(layouts);\n    localStorage.setItem(\"dashboardLayouts\", JSON.stringify(layouts));\n  };\n\n  // Load saved layouts on component mount\n  useEffect(() => {\n    const savedLayouts = localStorage.getItem(\"dashboardLayouts\");\n    if (savedLayouts) {\n      setLayouts(JSON.parse(savedLayouts));\n    }\n  }, []);\n\n  const handleTabChange = (event, newValue) => {\n    setTabValue(newValue);\n  };\n\n  const handleRegionChange = (event) => {\n    const region = event.target.value;\n    setSelectedRegion(region);\n    setPage(0);\n\n    if (region === \"All\") {\n      setSelectedStates([]);\n    } else {\n      setSelectedStates(REGIONS[region]);\n    }\n  };\n\n  const handleStateChange = (event) => {\n    const selectedStateValues = event.target.value;\n    setSelectedStates(selectedStateValues);\n    setPage(0);\n\n    // Determine if the selected states match a region\n    let matchedRegion = \"All\";\n    Object.entries(REGIONS).forEach(([region, states]) => {\n      // Check if selected states match exactly this region\n      if (\n        states.length === selectedStateValues.length &&\n        states.every((state) => selectedStateValues.includes(state))\n      ) {\n        matchedRegion = region;\n      }\n    });\n    setSelectedRegion(matchedRegion);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  // Effect for auto-refreshing data every 30 minutes\n  useEffect(() => {\n    // Initial data fetch\n    fetchData();\n\n    // Set up 30-minute interval for data refresh\n    const refreshInterval = setInterval(() => {\n      fetchData();\n    }, 30 * 60 * 1000); // 30 minutes in milliseconds\n\n    // Clean up on unmount\n    return () => clearInterval(refreshInterval);\n  }, [selectedStates, selectedRegion]);\n\n  // Function to fetch data with online status handling\n  const fetchData = () => {\n    setLoading(true);\n\n    // Check if we're online\n    if (navigator.onLine) {\n      setIsOffline(false);\n\n      // Build the API URL\n      let url = \"http://localhost:8000/api/data/?nationwide=true\";\n      if (selectedStates.length > 0) {\n        selectedStates.forEach((state) => {\n          url += `&states=${state}`;\n        });\n      }\n\n      fetch(url)\n        .then((res) => res.json())\n        .then((data) => {\n          console.log(\"API response:\", data);\n          setLocalData(data.local);\n          setNearbyData(data.nearby);\n\n          // Process the data\n          processData([...data.local, ...data.nearby]);\n\n          // Update last updated timestamp\n          setLastUpdated(new Date());\n\n          // Store data in localStorage for offline use\n          localStorage.setItem(\n            \"dashboardData\",\n            JSON.stringify({\n              local: data.local,\n              nearby: data.nearby,\n              timestamp: new Date().toISOString(),\n            })\n          );\n\n          setLoading(false);\n        })\n        .catch((err) => {\n          console.error(\"Error fetching data:\", err);\n          setIsOffline(true);\n          loadCachedData();\n        });\n    } else {\n      // We're offline, use cached data\n      setIsOffline(true);\n      loadCachedData();\n    }\n  };\n\n  // Function to load cached data from localStorage\n  const loadCachedData = () => {\n    const cachedData = localStorage.getItem(\"dashboardData\");\n    if (cachedData) {\n      const parsed = JSON.parse(cachedData);\n      setLocalData(parsed.local);\n      setNearbyData(parsed.nearby);\n      processData([...parsed.local, ...parsed.nearby]);\n      setLastUpdated(new Date(parsed.timestamp));\n    }\n    setLoading(false);\n  };\n\n  // Apply filters whenever any filter changes\n  useEffect(() => {\n    applyFilters();\n  }, [selectedStates, readinessRange, selectedHazardLevels, allFacilityData]);\n\n  // Apply state/region filters to facility data\n  const applyFilters = () => {\n    if (allFacilityData.length === 0) return;\n\n    // Create a clean copy of all facility data to avoid duplicate tracking issues\n    let filtered = [...allFacilityData];\n    \n    // Track facilities by a unique identifier to prevent duplicates\n    const uniqueFacilities = new Map();\n    \n    // Apply state filter if any states are selected\n    if (selectedStates.length > 0) {\n      filtered = filtered.filter((facility) =>\n        selectedStates.includes(facility.state)\n      );\n    }\n\n    // Apply readiness score range filter\n    filtered = filtered.filter(\n      (facility) =>\n        facility.readinessScore >= readinessRange[0] &&\n        facility.readinessScore <= readinessRange[1]\n    );\n\n    // Apply hazard level filter\n    if (selectedHazardLevels.length > 0 && selectedHazardLevels.length < 5) {\n      filtered = filtered.filter((facility) =>\n        selectedHazardLevels.includes(facility.hazardLevel)\n      );\n    }\n    \n    // Ensure no duplicates by using a Map with facility name + state as key\n    filtered.forEach(facility => {\n      const key = `${facility.name}-${facility.state}-${facility.city}`;\n      uniqueFacilities.set(key, facility);\n    });\n    \n    // Convert back to array\n    const uniqueFiltered = Array.from(uniqueFacilities.values());\n\n    // Update the displayed facility data\n    setFacilityData(uniqueFiltered);\n\n    // Recalculate totals based on filtered data\n    const beds = Math.max(\n      uniqueFiltered.reduce((sum, facility) => sum + (facility.bedCapacity || 0), 0),\n      100 // Minimum reasonable value\n    );\n    setTotalBeds(beds);\n  };\n\n  // Group data by location to get facility-level data\n  const processFacilityData = (data) => {\n    // Use a Map to ensure unique facilities\n    const locationMap = new Map();\n\n    // Make sure we have data to process\n    if (!data || data.length === 0) {\n      console.log(\"No data to process in processFacilityData\");\n      return [];\n    }\n\n    console.log(\n      `Processing ${data.length} person records to extract facilities`\n    );\n\n    // Group by location\n    data.forEach((person) => {\n      // Skip entries without a location\n      if (!person.location) {\n        return;\n      }\n\n      // Create a unique key for the facility\n      // Combine location name, city, and state to ensure uniqueness\n      const facilityKey = `${person.location}_${person.city || \"\"}_${person.state || \"\"}`;\n\n      if (!locationMap.has(facilityKey)) {\n        locationMap.set(facilityKey, {\n          name: person.location,\n          state: person.state,\n          city: person.city,\n          zip_code: person.zip_code,\n          latitude: person.latitude,\n          longitude: person.longitude,\n          staff: [],\n        });\n      }\n\n      locationMap.get(facilityKey).staff.push(person);\n    });\n\n    console.log(\n      `Grouped ${data.length} person records into ${locationMap.size} unique facilities`\n    );\n\n    // ... existing code ...\n  };\n\n  return (\n    <div>\n      {/* Rest of the component JSX code */}\n    </div>\n  );\n}\n\nexport default LocalDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}