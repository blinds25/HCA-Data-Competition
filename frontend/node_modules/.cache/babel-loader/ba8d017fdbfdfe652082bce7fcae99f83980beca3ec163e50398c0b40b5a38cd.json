{"ast":null,"code":"var _jsxFileName = \"/Users/brysonlindsey/Documents/my-project/frontend/src/components/DataDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Container, Typography, Box } from '@mui/material';\nimport MapComponent from './MapComponent';\nimport PeopleList from './PeopleList';\nimport EmailModal from './EmailModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DataDashboard() {\n  _s();\n  var _location$state;\n  // Retrieve the zip code (passed from a previous page, e.g., via state)\n  const location = useLocation();\n  const zipCode = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.zipCode) || '';\n  console.log(\"Zip code from location:\", zipCode);\n\n  // Two state variables to store local and nearby data\n  const [localData, setLocalData] = useState([]);\n  const [nearbyData, setNearbyData] = useState([]);\n\n  // State for handling the email modal (if needed)\n  const [selectedEmailData, setSelectedEmailData] = useState(null);\n  useEffect(() => {\n    if (zipCode) {\n      // Fetch data from the Django API endpoint\n      fetch(`http://localhost:8000/api/data/?zip_code=${zipCode}`).then(res => res.json()).then(data => {\n        setLocalData(data.local);\n        setNearbyData(data.nearby);\n      }).catch(err => console.error(err));\n    }\n  }, [zipCode]);\n  const openEmailModal = (recipient, subjectType) => {\n    const subject = subjectType === 'A' ? 'Subject for Button A' : 'Subject for Button B';\n    setSelectedEmailData({\n      recipient,\n      subject\n    });\n  };\n  const closeEmailModal = () => {\n    setSelectedEmailData(null);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    sx: {\n      mt: 4\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      gutterBottom: true,\n      children: [\"Data Dashboard for Zip: \", zipCode]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        my: 4\n      },\n      children: /*#__PURE__*/_jsxDEV(MapComponent, {\n        data: [...localData, ...nearbyData]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: \"People in Your Zip Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PeopleList, {\n      people: localData,\n      onContact: openEmailModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      sx: {\n        mt: 4\n      },\n      children: \"People Nearby (50-100 miles away)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PeopleList, {\n      people: nearbyData,\n      onContact: openEmailModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), selectedEmailData && /*#__PURE__*/_jsxDEV(EmailModal, {\n      emailData: selectedEmailData,\n      onClose: closeEmailModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(DataDashboard, \"3felfKpO9Zm5vRP23qirQleVaIM=\", false, function () {\n  return [useLocation];\n});\n_c = DataDashboard;\nexport default DataDashboard;\nvar _c;\n$RefreshReg$(_c, \"DataDashboard\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","Container","Typography","Box","MapComponent","PeopleList","EmailModal","jsxDEV","_jsxDEV","DataDashboard","_s","_location$state","location","zipCode","state","console","log","localData","setLocalData","nearbyData","setNearbyData","selectedEmailData","setSelectedEmailData","fetch","then","res","json","data","local","nearby","catch","err","error","openEmailModal","recipient","subjectType","subject","closeEmailModal","sx","mt","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","my","people","onContact","emailData","onClose","_c","$RefreshReg$"],"sources":["/Users/brysonlindsey/Documents/my-project/frontend/src/components/DataDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Container, Typography, Box } from '@mui/material';\nimport MapComponent from './MapComponent';\nimport PeopleList from './PeopleList';\nimport EmailModal from './EmailModal';\n\nfunction DataDashboard() {\n  // Retrieve the zip code (passed from a previous page, e.g., via state)\n  const location = useLocation();\n  const zipCode = location.state?.zipCode || '';\n  console.log(\"Zip code from location:\", zipCode);\n\n  \n  // Two state variables to store local and nearby data\n  const [localData, setLocalData] = useState([]);\n  const [nearbyData, setNearbyData] = useState([]);\n  \n  // State for handling the email modal (if needed)\n  const [selectedEmailData, setSelectedEmailData] = useState(null);\n\n  useEffect(() => {\n    if (zipCode) {\n      // Fetch data from the Django API endpoint\n      fetch(`http://localhost:8000/api/data/?zip_code=${zipCode}`)\n        .then((res) => res.json())\n        .then((data) => {\n          setLocalData(data.local);\n          setNearbyData(data.nearby);\n        })\n        .catch((err) => console.error(err));\n    }\n  }, [zipCode]);\n\n  const openEmailModal = (recipient, subjectType) => {\n    const subject = subjectType === 'A' ? 'Subject for Button A' : 'Subject for Button B';\n    setSelectedEmailData({ recipient, subject });\n  };\n\n  const closeEmailModal = () => {\n    setSelectedEmailData(null);\n  };\n\n  return (\n    <Container sx={{ mt: 4 }}>\n      <Typography variant=\"h5\" gutterBottom>\n        Data Dashboard for Zip: {zipCode}\n      </Typography>\n      \n      {/* Map view: Display markers for both local and nearby people */}\n      <Box sx={{ my: 4 }}>\n        <MapComponent data={[...localData, ...nearbyData]} />\n      </Box>\n      \n      {/* List view for local data */}\n      <Typography variant=\"h6\" gutterBottom>\n        People in Your Zip Code\n      </Typography>\n      <PeopleList people={localData} onContact={openEmailModal} />\n      \n      {/* List view for nearby data */}\n      <Typography variant=\"h6\" gutterBottom sx={{ mt: 4 }}>\n        People Nearby (50-100 miles away)\n      </Typography>\n      <PeopleList people={nearbyData} onContact={openEmailModal} />\n\n      {selectedEmailData && (\n        <EmailModal emailData={selectedEmailData} onClose={closeEmailModal} />\n      )}\n    </Container>\n  );\n}\n\nexport default DataDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}